{"version":3,"sources":["logo.svg","DateEditor.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DateEditor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","browserLocale","window","navigator","userLanguage","language","handleChange","event","_ref","name","value","localDate","moment","locale","format","state","hasOwnProperty","setState","defineProperty","onCommit","console","log","dateEditor","finish_by_date","ReactDOM","findDOMNode","getElementsByTagName","react_default","a","createElement","Form","commonjs","dateFormat","localization","placeholder","iconPosition","onChange","React","Component","Row","ReactDataGrid","const_columns","key","sortable","editable","editor","formatter","RowRenderer","setScrollLeft","scrollBy","row","getRowStyle","color","getRowBackground","done","_this2","style","assign","ref","node","App","_this3","rows","refresh","onGridSort","columnName","sortDirection","comparer","returnComparer","sort","sortColumn","onGridRowsUpdated","_ref2","fromRow","toRow","updated","slice","i","rowToUpdate","update","$merge","canSave","onRowsSelected","selectedIndexes","concat","map","r","rowIdx","onRowsDeselected","rowIndexes","filter","indexOf","addNewRow","addNewRows","push","id","title","length","isNew","deleteRow","rowId","axios","delete","then","res","data","filteredSelectedIndexes","filteredRows","element","index","markAsDone","url","put","myEditCallback","finishDate","Date","post","e","todo","getEditRowAction","column","cellActions","icon","className","callback","columns","bind","assertThisInitialized","_this4","get","response","newRows","c","newState","catch","error","grid","handleSort","count","b","_this5","onKeyPress","keyPress","Typography_default","variant","react_data_grid_default","rowGetter","rowsCount","getSize","rowRenderer","enableCellSelect","rowSelection","minWidth","maxWidth","resizable","showCheckbox","enableShiftSelect","selectBy","indexes","minHeight","getCellActions","index_es","onClick","float","margin","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9cfb12a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { DateInput } from \"semantic-ui-calendar-react\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Form } from \"semantic-ui-react\";\nimport autoBind from \"react-autobind\";\nimport moment from \"moment\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nexport default class DateEditor extends React.Component {\n  browserLocale = window.navigator.userLanguage || window.navigator.language;\n  constructor(props) {\n    super(props);\n    this.state = { dateEditor: \"\" };\n    //moment(props.value).format('L')\n  }\n  getValue() {\n    //return { date: moment(this.state.dateEditor).format(\"L\") };\n    //let date = moment(this.state.dateEditor).format('')\n    return { finish_by_date: this.state.dateEditor };\n  }\n\n  getInputNode() {\n    return ReactDOM.findDOMNode(this).getElementsByTagName(\"input\")[0];\n  }\n\n  handleChange = (event, { name, value }) => {\n    //this.setState({ [name]: value }, () => this.props.onCommit());\n    let localDate = moment(value)\n      .locale(this.browserLocale)\n      .format(\"L\");\n    if (this.state.hasOwnProperty(name)) {\n      this.setState({ [name]: localDate }, () => this.props.onCommit()); //);); //, () => this.props.onCommit()); //);\n      console.log(value);\n      console.log(localDate);\n    }\n  };\n\n  render() {\n    return (\n      <Form>\n        <DateInput\n          name=\"dateEditor\"\n          dateFormat=\"L\"\n          localization={this.browserLocale}\n          placeholder=\"Date\"\n          value={this.state.dateEditor}\n          //{moment(this.state.date).format('L')}\n          iconPosition=\"left\"\n          onChange={this.handleChange}\n        />\n      </Form>\n    );\n  }\n}\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport ReactDOM from 'react-dom';\nimport ReactDataGrid from 'react-data-grid';\nimport update from 'immutability-helper';\nimport Typography from '@material-ui/core/Typography'\nimport { Button, ListItemText } from '@material-ui/core'\n\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\";\n\nimport moment from \"moment\";\nimport DateEditor from \"./DateEditor\";\n\nimport PropTypes from 'prop-types';\n\nconst { Row } = ReactDataGrid;\nconst dateDisplay = ({ value }) => {\n    return value == null ? null : moment(value).format(\"L\");\n};\n\n\nconst const_columns = [\n    { key: \"title\", name: \"Title\", sortable: true, editable: true },\n    { key: \"done\", name: \"Done\", sortable: true, editable: true },\n    { key: \"finish_by_date\", name: \"Finish by\", sortable: true, editable: true, editor: DateEditor, formatter: dateDisplay }\n];\n\nclass RowRenderer extends React.Component {\n  static propTypes = {\n    idx: PropTypes.string.isRequired\n  };\n\n  setScrollLeft = (scrollBy) => {\n    this.row.setScrollLeft(scrollBy);\n  };\n\n  getRowStyle = () => {\n    return {\n      color: this.getRowBackground()\n    };\n  };\n\n  getRowBackground = () => {\n    return this.props.row.done == true ? 'gray' : 'blue';\n  };\n\n  render() {\n    // usually though it will just be a matter of wrapping a div, and then calling back through to the grid\n    return (<div style={this.getRowStyle()}><Row ref={ node => this.row = node } {...this.props}/></div>);\n  }\n}\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: const_columns,\n            rows: [],\n            selectedIndexes: []\n        }\n\n        this.addNewRow = this.addNewRow.bind(this);\n    }\n\n    state = {\n        rows: [],\n        refresh: false\n    };\n\n    componentDidMount() {\n        axios\n            .get(\"https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos\")\n            .then(response => {\n\n                const newRows = response.data.map(c => {\n                    return {\n                        id: c.id,\n                        title: c.title,\n                        done: c.done,\n                        finish_by_date: c.finish_by_date\n                    };\n                });\n\n                var comparer = this.returnComparer('ASC', 'finish_by_date')\n\n                const newState = Object.assign({}, this.state, {\n                    rows: newRows.sort(comparer)\n                });\n\n                this.setState(newState);\n            })\n            .catch(error => console.log(error));\n\n        // set column arrow to sort\n        this.grid.handleSort('finish_by_date', 'ASC');\n    }\n\n    onGridSort = (columnName, sortDirection) => {\n        var comparer = this.returnComparer(sortDirection, columnName)\n        this.state.rows.sort(comparer);\n\n        this.setState({\n            sortColumn: columnName,\n            sortDirection: sortDirection,\n        })\n    }\n\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n        let rows = this.state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n            let rowToUpdate = rows[i];\n            rows[i] = update(rowToUpdate, {$merge: updated});\n            rows[i].canSave = true;\n        }\n\n        this.setState({rows});\n    };\n\n    onRowsSelected = rows => {\n        this.setState({\n            selectedIndexes: this.state.selectedIndexes.concat(\n                rows.map(r => r.rowIdx)\n            )\n        })\n    }\n\n    onRowsDeselected = rows => {\n        let rowIndexes = rows.map(r => r.rowIdx)\n        this.setState({\n            selectedIndexes: this.state.selectedIndexes.filter(\n                i => rowIndexes.indexOf(i) === -1\n            )\n        })\n    }\n\n    getSize() {\n        let count = this.state.rows.length;\n\n        if (this.state.refresh) {\n            count++; // hack for update data-grid\n            this.setState({\n                refresh: false\n            });\n        }\n\n        return count;\n    }\n\n    refresh() {\n        this.setState({\n            refresh: true\n        });\n    }\n\n    addNewRow = () => {\n        let addNewRows = this.state.rows.slice()\n\n        addNewRows.push({\n            id: 11,\n            title: \"\",\n            done: false\n        });\n\n        addNewRows[this.state.rows.length].canSave = true;\n        addNewRows[this.state.rows.length].isNew = true;\n        this.setState({rows: addNewRows});\n        this.setState(this.state.selectedIndexes)\n\n        console.log('added new row')\n    }\n\n    deleteRow = () => { \n        console.log(this.state.selectedIndexes)\n\n        const selectedIndexes = this.state.selectedIndexes\n\n        if (selectedIndexes.length != 1) {\n            return;\n        }\n\n        let rowId = this.state.rows[selectedIndexes[0]].id\n\n        axios.delete(`https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos/${rowId}`)\n            .then(res => {\n                console.log(res);\n                console.log(res.data);\n            })\n            \n        let filteredSelectedIndexes = []\n\n        // delete one item at once\n        const filteredRows = this.state.rows.filter(function(element, index) {\n            // user indexOf method to find\n            if(selectedIndexes.indexOf(index) >= 0) {\n                filteredSelectedIndexes = selectedIndexes.filter(i => i !== index);\n                return false\n            } else {\n                return true\n            }\n        })\n        this.setState({ selectedIndexes: filteredSelectedIndexes });\n        this.setState({ rows: filteredRows });\n    }\n\n    markAsDone = () => { \n        console.log(this.state.selectedIndexes)\n\n        const selectedIndexes = this.state.selectedIndexes\n\n        if (selectedIndexes.length != 1) {\n            return;\n        }\n\n        let row = this.state.rows[selectedIndexes[0]]\n        row.done = true;\n\n        let rows = this.state.rows.slice()\n\n        rows[selectedIndexes[0]] = row\n            \n        this.setState({rows});\n\n        const todo = { done: true };\n\n        let url = 'https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos/' + row.id;\n        axios.put(url, todo)\n            .then(res => {\n                console.log(res);\n                console.log(res.data);\n            })\n    }\n\n    returnComparer(sortDirection, columnName) {\n        return function (a, b) {\n            if (sortDirection === 'ASC') {\n                return (a[columnName] > b[columnName]) ? 1 : -1;\n            }\n            else if (sortDirection === 'DESC') {\n                return (a[columnName] < b[columnName]) ? 1 : -1;\n            }\n        };\n    }\n\n    keyPress(event) {\n        console.log(\"pressed\")\n        console.log(event)\n    }\n\n    myEditCallback = (row) => {\n        console.log(row);\n        \n        var finishDate = new Date(row.finish_by_date);\n            \n        if (row.isNew) {\n            try {\n                axios.post('https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos', \n                    { \n                        title: row.title,\n                        done: row.done,\n                        finish_by_date: finishDate\n                    })\n                    .then(res => {\n                        console.log(res);\n                        console.log(res.data);\n                    })\n            } catch (e) {\n                console.log(`:( Axios request failed: ${e}`)\n            }\n        }\n        else {\n            const todo = {                \n                title: row.title,\n                done: row.done,\n                finish_by_date: finishDate\n            };\n\n            let url = 'https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos/' + row.id;\n            axios.put(url, todo)\n                .then(res => {\n                    console.log(res);\n                    console.log(res.data);\n                })\n        }\n\n        const rows = this.state.rows;\n        const index = rows.indexOf(row);\n\n        rows[index].canSave = false;\n\n        this.setState({ rows });\n        this.refresh();\n    };\n\n    getEditRowAction = (column, row, state) => {\n        const cellActions = {\n            finish_by_date: [\n                {\n                    icon: <span className=\"glyphicon glyphicon-pencil\" />,\n                    callback: () => {\n                        this.myEditCallback(row);\n                    }\n                }\n            ]\n        };\n\n        return row.canSave ? cellActions[column.key] : null;\n    }\n\n\n\n    render() {\n        return (\n            <div onKeyPress={event => this.keyPress(event)}>\n            <Typography variant='display1'>\n            To-Do List\n            </Typography>\n\n            <ReactDataGrid\n            columns={this.state.columns}\n            rowGetter={i => this.state.rows[i]}\n            ref={grid => (this.grid = grid)}\n            rowsCount={this.getSize()}\n            onGridSort={this.onGridSort}\n            rowRenderer={RowRenderer}\n            onGridRowsUpdated={this.onGridRowsUpdated}\n            enableCellSelect={true}\n            rowSelection={{\n                minWidth: 5,\n                    maxWidth: 50,\n                    resizable: true,\n                    showCheckbox: true,\n                    enableShiftSelect: false,\n                    onRowsSelected: this.onRowsSelected,\n                    onRowsDeselected: this.onRowsDeselected,\n                    selectBy: {\n                        indexes: this.state.selectedIndexes\n                    }\n            }}\n            minHeight={500} \n            getCellActions= {(column, row) => this.getEditRowAction(column, row)}\n            />\n\n            <Button onClick={this.addNewRow} variant='contained' style={{float: 'right', margin: 20}}>Add</Button>\n            <Button onClick={this.deleteRow} variant='outlined' color='secondary' style={{ margin: 20 }}>Delete</Button>\n            <Button onClick={this.markAsDone} variant='outlined' color='secondary' style={{ margin: 40 }}>Done</Button>\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n//render(<Example />, document.querySelector(\"#root\"));\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}