{"version":3,"sources":["history.js","DateEditor.js","AxiosClient.js","components/Signup.js","components/Login.js","App.js","registerServiceWorker.js","index.js"],"names":["createBrowserHistory","DateEditor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","browserLocale","window","navigator","userLanguage","language","handleChange","event","_ref","name","value","localDate","moment","locale","format","state","hasOwnProperty","setState","defineProperty","onCommit","console","log","dateEditor","finish_by_date","ReactDOM","findDOMNode","getElementsByTagName","react_default","a","createElement","Form","commonjs","dateFormat","localization","placeholder","iconPosition","onChange","React","Component","fetchClient","defaultOptions","baseURL","process","REACT_APP_API_PATH","method","headers","Content-Type","instance","axios","create","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","Signup","password","password_confirmation","email","changeHandler","e","target","submitHandler","preventDefault","id","onSubmit","className","type","required","location","pathname","startsWith","react_router_dom","to","Login","DropDownEditor","Editors","PriorityEditor","options","Row","ReactDataGrid","const_columns","key","sortable","editable","editor","formatter","RowRenderer","setScrollLeft","scrollBy","row","getStyle","isDone","done","color","fontStyle","fontFamily","fontWeight","_this2","style","assign","ref","node","App","_this3","rows","refresh","signupSubmitHandler","userInfo","fetch","body","JSON","stringify","content-type","accepts","then","resp","json","data","setItem","auth_token","user","splicedRows","slice","i","length","newRow","priority","finishDate","Date","AxiosClient","post","title","res","canSave","isNew","loginSubmitHandler","message","react_router","reload","onGridSort","columnName","sortDirection","comparer","returnComparer","sort","sortColumn","onGridRowsUpdated","_ref2","fromRow","toRow","updated","rowToUpdate","update","$merge","onRowsSelected","selectedIndexes","map","r","rowIdx","onRowsDeselected","rowIndexes","filter","indexOf","addNewRow","addNewRows","defaultDate","add","toDate","push","deleteRow","rowId","delete","filteredSelectedIndexes","filteredRows","element","index","markAsDone","url","put","myEditCallback","todo","getEditRowAction","column","cellActions","icon","callback","logOut","removeItem","columns","bind","assertThisInitialized","history","_this4","get","response","newRows","c","newState","catch","error","grid","handleSort","count","b","_this5","onKeyPress","keyPress","Typography_default","variant","react_data_grid_default","rowGetter","rowsCount","getSize","rowRenderer","enableCellSelect","rowSelection","minWidth","maxWidth","resizable","showCheckbox","enableShiftSelect","selectBy","indexes","minHeight","getCellActions","index_es","onClick","float","margin","path","render","components_Signup","components_Login","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","src_App_0","document","getElementById","URL","origin","addEventListener","status","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.219c276e.chunk.js","sourcesContent":["// src/history.js\n\nimport { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import { DateInput } from \"semantic-ui-calendar-react\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Form } from \"semantic-ui-react\";\nimport autoBind from \"react-autobind\";\nimport moment from \"moment\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nexport default class DateEditor extends React.Component {\n  browserLocale = window.navigator.userLanguage || window.navigator.language;\n  constructor(props) {\n    super(props);\n    this.state = { dateEditor: \"\" };\n    //moment(props.value).format('L')\n  }\n  getValue() {\n    //return { date: moment(this.state.dateEditor).format(\"L\") };\n    //let date = moment(this.state.dateEditor).format('')\n    return { finish_by_date: this.state.dateEditor };\n  }\n\n  getInputNode() {\n    return ReactDOM.findDOMNode(this).getElementsByTagName(\"input\")[0];\n  }\n\n  handleChange = (event, { name, value }) => {\n    //this.setState({ [name]: value }, () => this.props.onCommit());\n    let localDate = moment(value)\n      .locale(this.browserLocale)\n      .format(\"L\");\n    if (this.state.hasOwnProperty(name)) {\n      this.setState({ [name]: localDate }, () => this.props.onCommit()); //);); //, () => this.props.onCommit()); //);\n      console.log(value);\n      console.log(localDate);\n    }\n  };\n\n  render() {\n    return (\n      <Form>\n        <DateInput\n          name=\"dateEditor\"\n          dateFormat=\"L\"\n          localization={this.browserLocale}\n          placeholder=\"Date\"\n          value={this.state.dateEditor}\n          //{moment(this.state.date).format('L')}\n          iconPosition=\"left\"\n          onChange={this.handleChange}\n        />\n      </Form>\n    );\n  }\n}\n","import axios from 'axios';\n\nconst fetchClient = () => {\n  const defaultOptions = {\n    baseURL: process.env.REACT_APP_API_PATH,\n    method: 'get',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  let instance = axios.create(defaultOptions);\n\n  instance.interceptors.request.use(function (config) {\n    const token = localStorage.getItem('token');\n    config.headers.Authorization =  token ? `Bearer ${token}` : '';\n    return config;\n  });\n\n  return instance;\n};\n\nexport default fetchClient();\n","import React from \"react\";\nimport {Link} from 'react-router-dom';\n\nclass Signup extends React.Component {\n  state = {\n    password: \"\",\n    password_confirmation: \"\",\n    email: \"\"\n  };\n\n  changeHandler = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    this.props.submitHandler(this.state);\n    this.setState({\n      password: \"\",\n      password_confirmation: \"\",\n      email: \"\"\n    });\n  };\n  render() {\n    return (\n      <div id=\"right-col\">\n        <form onSubmit={this.submitHandler}>\n          <legend className=\"uk-legend\">Please sign up</legend>\n          <input\n            type=\"text\"\n            placeholder=\"email\"\n            required\n            name=\"email\"\n            value={this.state.email}\n            onChange={this.changeHandler}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"password\"\n            required\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.changeHandler}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"confirm password\"\n            required\n            name=\"password_confirmation\"\n            value={this.state.password_confirmation}\n            onChange={this.changeHandler}\n          />\n          <button>Sign Up</button>\n          <br/>\n          {((window.location.pathname).startsWith('/login'))\n            ? <span className=\"uk-link-muted\"><Link to={`${process.env.PUBLIC_URL}/signup`}>I Don't Have An Account</Link></span>\n            : <span className=\"uk-link-muted\"><Link to={`${process.env.PUBLIC_URL}/login`}>I Have An Account Already</Link></span>\n          }\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n","import React from \"react\";\nimport {Link} from 'react-router-dom';\n\nclass Login extends React.Component {\n  state = {\n    email: \"\",\n    password: \"\"\n  };\n\n  changeHandler = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    this.props.submitHandler(this.state);\n  };\n  render() {\n    return (\n      <div id=\"right-col\" className=\"uk-tile-muted uk-padding-large uk-height-viewport login-box\">\n        <form onSubmit={this.submitHandler}>\n          <input\n            className=\"uk-input\"\n            type=\"text\"\n            placeholder=\"Email\"\n            name=\"email\"\n            required\n            value={this.state.email}\n            onChange={this.changeHandler}\n          />\n          <input\n            className=\"uk-input\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            required\n            value={this.state.password}\n            onChange={this.changeHandler}\n          />\n          <button\n          className=\"uk-button\"\n          >\n          Login</button>\n          <br/>\n          {((window.location.pathname).startsWith('/login'))\n            ? <span className=\"uk-link-muted\"><Link to={`${process.env.PUBLIC_URL}/signup`}>I Don't Have An Account</Link></span>\n            : <span className=\"uk-link-muted\"><Link to={`${process.env.PUBLIC_URL}/login`}>I Have An Account Already</Link></span>\n          }\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport ReactDOM from 'react-dom';\n\nimport {Router,Route, Switch, BrowserRouter,Redirect} from 'react-router-dom'\nimport history from './history';\n\nimport ReactDataGrid from 'react-data-grid';\nimport update from 'immutability-helper';\nimport Typography from '@material-ui/core/Typography'\nimport { Button } from '@material-ui/core'\n\nimport { Editors } from \"react-data-grid-addons\";\nimport './App.css';\n\nimport moment from \"moment\";\nimport DateEditor from \"./DateEditor\";\nimport AxiosClient from \"./AxiosClient\";\n\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\nimport Signup from \"./components/Signup\";\nimport Login from \"./components/Login\";\n\nconst { DropDownEditor } = Editors;\nconst priorityTypes = [\n  { id: \"false\", value: \"Not urgent\" },\n  { id: \"null\", value: \"Normal\" },\n  { id: \"true\", value: \"Urgent\" }\n];\n\nconst PriorityEditor = <DropDownEditor options={priorityTypes} />;\n\nconst { Row } = ReactDataGrid;\nconst dateDisplay = ({ value }) => {\n    return value == null ? null : moment(value).format(\"L\");\n};\n\n\nconst const_columns = [\n    { key: \"title\", name: \"Title\", sortable: true, editable: true },\n    { key: \"priority\", name: \"Priority\", sortable: true, editable: true, editor: PriorityEditor },\n    { key: \"finish_by_date\", name: \"Finish by\", sortable: true, editable: true, editor: DateEditor, formatter: dateDisplay }\n];\n\nclass RowRenderer extends React.Component {\n  static propTypes = {\n    idx: PropTypes.string.isRequired\n  };\n\n  setScrollLeft = (scrollBy) => {\n    this.row.setScrollLeft(scrollBy);\n  };\n\n  getStyle = () => {\n    let isDone = this.props.row.done === true;\n    return {\n      color: isDone ? 'gray' : 'black',\n      fontStyle: isDone ? 'italic' : 'normal',\n      fontFamily: isDone ? 'cursive' : 'inherit',\n      fontWeight: isDone ? 'bold' : 'inherit'\n    };\n  };\n\n  render() {\n    // usually though it will just be a matter of wrapping a div, and then calling back through to the grid\n    return (<div style={this.getStyle()}><Row ref={ node => this.row = node } {...this.props}/></div>);\n  }\n}\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: const_columns,\n            rows: [],\n            selectedIndexes: [],\n            user: {}\n        }\n\n        this.addNewRow = this.addNewRow.bind(this);\n\n        history.push(`${process.env.PUBLIC_URL}/login`);\n    }\n\n    state = {\n        rows: [],\n        refresh: false\n    };\n\n    componentDidMount() {\n        let retrieveTodos = (localStorage.getItem('username') !== '' && localStorage.getItem('username') !== null);\n\n        if (retrieveTodos) {\n            AxiosClient\n                .get(\"https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos\")\n                .then(response => {\n                    const newRows = response.data.map(c => {\n                        var priority = c.priority === null ? \"Normal\" : c.priority === false ? \"Not urgent\" : true;\n\n                        return {\n                            id: c.id,\n                            title: c.title,\n                            priority: priority,\n                            done: c.done,\n                            finish_by_date: c.finish_by_date\n                        };\n                    });\n\n                    var comparer = this.returnComparer('ASC', 'finish_by_date')\n\n                    const newState = Object.assign({}, this.state, {\n                        rows: newRows.sort(comparer)\n                    });\n\n                    this.setState(newState);\n                })\n                .catch(error => console.log(error));\n        }\n        // set column arrow to sort\n        this.grid.handleSort('finish_by_date', 'ASC');\n    }\n\n    signupSubmitHandler = userInfo => {\n        fetch(\"https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/signup\", {\n            method: \"POST\",\n            body: JSON.stringify({ password: userInfo.password, password_confirmation: userInfo.password_confirmation, email: userInfo.email }),\n            headers: {\n                \"content-type\": \"application/json\",\n                accepts: \"application/json\"\n            }\n        })\n            .then(resp => resp.json())\n            .then(data => {\n                localStorage.setItem(\"token\", data.auth_token);\n                localStorage.setItem(\"username\", userInfo.email);\n                this.setState({ user: data.user }, () => console.log(this.state));\n\n                let splicedRows = this.state.rows.slice();\n\n                for (let i = 0; i < splicedRows.length; i++) {\n                    let newRow = splicedRows[i];\n\n                    var priority = newRow.priority === \"Normal\" ? null : newRow.priority === \"Not urgent\" ? false : true;\n                    var finishDate = new Date(newRow.finish_by_date);\n\n                    AxiosClient.post('https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos', \n                        { \n                            title: newRow.title,\n                            done: newRow.done,\n                            priority: priority,\n                            finish_by_date: finishDate\n                        })\n                        .then(res => {\n                            console.log(res);\n                            console.log(res.data);\n                        })\n\n                    splicedRows[i].canSave = false;\n                    splicedRows[i].isNew = false;\n                }\n\n                this.setState({ rows: splicedRows });\n                this.refresh();\n            });\n    };\n\n    loginSubmitHandler = userInfo => {\n        fetch(\"https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify({ email: userInfo.email, password: userInfo.password }),\n            headers: {\n                \"content-type\": \"application/json\",\n                accepts: \"application/json\"\n            }\n        })\n            .then(resp => resp.json())\n            .then(user => {\n                if (user.message) {\n                    return <Redirect to=\"/\" />;\n                } else {\n                    localStorage.setItem(\"token\", user.auth_token);\n                    localStorage.setItem(\"username\", userInfo.email);\n                    this.setState({ user: user }, () => console.log(\"User is logged in from loginSubmitHandler!\", user));\n                }\n\n                // refresh the view somehow\n                window.location.reload();\n            });\n    };\n\n    onGridSort = (columnName, sortDirection) => {\n        var comparer = this.returnComparer(sortDirection, columnName)\n        this.state.rows.sort(comparer);\n\n        this.setState({\n            sortColumn: columnName,\n            sortDirection: sortDirection,\n        })\n    }\n\n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n        let rows = this.state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n            let rowToUpdate = rows[i];\n            rows[i] = update(rowToUpdate, {$merge: updated});\n            rows[i].canSave = true;\n        }\n\n        this.setState({rows});\n    };\n\n    onRowsSelected = rows => {\n        this.setState({\n            selectedIndexes: rows.map(r => r.rowIdx)\n        })\n    }\n\n    onRowsDeselected = rows => {\n        let rowIndexes = rows.map(r => r.rowIdx)\n        this.setState({\n            selectedIndexes: this.state.selectedIndexes.filter(\n                i => rowIndexes.indexOf(i) === -1\n            )\n        })\n    }\n\n    getSize() {\n        let count = this.state.rows.length;\n\n        if (this.state.refresh) {\n            count++; // hack for update data-grid\n            this.setState({\n                refresh: false\n            });\n        }\n\n        return count;\n    }\n\n    refresh() {\n        this.setState({\n            refresh: true\n        });\n    }\n\n    addNewRow = () => {\n        let addNewRows = this.state.rows.slice()\n        var defaultDate = moment().add(1,'d').toDate(); \n\n        addNewRows.push({\n            title: \"\",\n            priority: \"Normal\",\n            finish_by_date: defaultDate,\n            done: false\n        });\n\n        addNewRows[this.state.rows.length].canSave = true;\n        addNewRows[this.state.rows.length].isNew = true;\n        this.setState({rows: addNewRows});\n        this.setState(this.state.selectedIndexes)\n\n        console.log('added new row')\n    }\n\n    deleteRow = () => { \n        console.log(this.state.selectedIndexes)\n\n        const selectedIndexes = this.state.selectedIndexes\n\n        if (selectedIndexes.length !== 1) {\n            return;\n        }\n\n        let rowId = this.state.rows[selectedIndexes[0]].id\n\n        AxiosClient.delete(`https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos/${rowId}`)\n            .then(res => {\n                console.log(res);\n                console.log(res.data);\n            })\n\n        let filteredSelectedIndexes = []\n\n        const filteredRows = this.state.rows.filter(function(element, index) {\n            if(selectedIndexes.indexOf(index) >= 0) {\n                filteredSelectedIndexes = selectedIndexes.filter(i => i !== index);\n                return false\n            } else {\n                return true\n            }\n        })\n\n        this.setState({ selectedIndexes: filteredSelectedIndexes });\n        this.setState({ rows: filteredRows });\n    }\n\n    markAsDone = () => { \n        console.log(this.state.selectedIndexes)\n\n        const selectedIndexes = this.state.selectedIndexes\n\n        if (selectedIndexes.length !== 1) {\n            return;\n        }\n\n        let row = this.state.rows[selectedIndexes[0]]\n        row.done = true;\n\n        let rows = this.state.rows.slice()\n\n        rows[selectedIndexes[0]] = row\n\n        this.setState({rows});\n\n        const todo = { done: true };\n\n        let url = 'https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos/' + row.id;\n        AxiosClient.put(url, todo)\n            .then(res => {\n                console.log(res);\n                console.log(res.data);\n            })\n    }\n\n    returnComparer(sortDirection, columnName) {\n        return function (a, b) {\n            if (sortDirection === 'ASC') {\n                return (a[columnName] > b[columnName]) ? 1 : -1;\n            }\n            else if (sortDirection === 'DESC') {\n                return (a[columnName] < b[columnName]) ? 1 : -1;\n            }\n        };\n    }\n\n    keyPress(event) {\n        console.log(\"pressed\")\n        console.log(event)\n    }\n\n    myEditCallback = (row) => {\n        console.log(row);\n\n        var finishDate = new Date(row.finish_by_date);\n        var priority = row.priority === \"Normal\" ? null : row.priority === \"Not urgent\" ? false : true;\n\n        if (row.isNew) {\n            try {\n                AxiosClient.post('https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos', \n                    { \n                        title: row.title,\n                        done: row.done,\n                        priority: priority,\n                        finish_by_date: finishDate\n                    })\n                    .then(res => {\n                        console.log(res);\n                        console.log(res.data);\n                    })\n            } catch (e) {\n                console.log(`:( Axios request failed: ${e}`)\n            }\n        }\n        else {\n            const todo = {\n                title: row.title,\n                done: row.done,\n                priority: priority,\n                finish_by_date: finishDate\n            };\n\n            let url = 'https://cors-anywhere.herokuapp.com/https://minimal-todo-server.herokuapp.com/todos/' + row.id;\n            AxiosClient.put(url, todo)\n                .then(res => {\n                    console.log(res);\n                    console.log(res.data);\n                })\n        }\n\n        const rows = this.state.rows;\n        const index = rows.indexOf(row);\n\n        rows[index].canSave = false;\n\n        this.setState({ rows });\n        this.refresh();\n    };\n\n    getEditRowAction = (column, row, state) => {\n        const cellActions = {\n            finish_by_date: [\n                {\n                    icon: <span className=\"glyphicon glyphicon-pencil\" />,\n                    callback: () => {\n                        this.myEditCallback(row);\n                    }\n                }\n            ]\n        };\n\n        return row.canSave ? cellActions[column.key] : null;\n    }\n\n    logOut = event => {\n        event.preventDefault()\n        localStorage.removeItem(\"token\")\n        // Remove the user object from the Redux store\n        localStorage.removeItem(\"username\")\n\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <div onKeyPress={event => this.keyPress(event)}>\n              {(localStorage.getItem('username') !== '' && localStorage.getItem('username') !== null)\n                ? <Typography variant='display1'> {localStorage.getItem('username')}'s To-Do List </Typography>\n                : <Typography variant='display1'> To-Do List </Typography>\n              }\n\n            <ReactDataGrid\n            columns={this.state.columns}\n            rowGetter={i => this.state.rows[i]}\n            ref={grid => (this.grid = grid)}\n            rowsCount={this.getSize()}\n            onGridSort={this.onGridSort}\n            rowRenderer={RowRenderer}\n            onGridRowsUpdated={this.onGridRowsUpdated}\n            enableCellSelect={true}\n            rowSelection={{\n                minWidth: 5,\n                    maxWidth: 50,\n                    resizable: true,\n                    showCheckbox: true,\n                    enableShiftSelect: false,\n                    onRowsSelected: this.onRowsSelected,\n                    onRowsDeselected: this.onRowsDeselected,\n                    selectBy: {\n                        indexes: this.state.selectedIndexes\n                    }\n            }}\n            minHeight={500}\n            getCellActions= {(column, row) => this.getEditRowAction(column, row)}\n            />\n\n            <Button onClick={this.addNewRow} variant='contained' style={{float: 'right', margin: 20}}>Add</Button>\n            <Button onClick={this.deleteRow} variant='outlined' color='secondary' style={{ margin: 20 }}>Delete</Button>\n            <Button onClick={this.markAsDone} variant='outlined' color='secondary' style={{ margin: 40 }}>Done</Button>\n\n            {(localStorage.getItem('username') !== '' && localStorage.getItem('username') !== null)\n                  ? <button onClick={this.logOut}>Log Out</button>\n                  : <Router history={history}>\n                        <Switch>\n                            <Route\n                                path={process.env.PUBLIC_URL + '/signup'}\n                                render={  () => <Signup submitHandler={this.signupSubmitHandler} />  }/>\n\n                            <Route\n                                path={process.env.PUBLIC_URL + '/login'}\n                                render={() => <Login submitHandler={this.loginSubmitHandler} /> }/>\n                        </Switch>\n                    </Router>\n            }\n\n            </div>\n\n        );\n    }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}